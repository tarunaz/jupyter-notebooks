---
kind: List
apiVersion: v1
items:
- kind: Template
  apiVersion: v1
  metadata:
    name: notebook-builder
    annotations:
      openshift.io/display-name: Jupyter Notebook Builder
      description: Template for creating customised Jupyter Notebook images.
      iconClass: icon-python
      tags: python,jupyter
  parameters:
  - name: NOTEBOOK_NAME
    value: custom-notebook
    required: true
  - name: BUILDER_IMAGE
    value: s2i-minimal-notebook:3.5
    required: true
  - name: GIT_REPOSITORY_URL
    value: ''
    required: true
  - name: GIT_REFERENCE
    value: master
    required: true
  - name: CONTEXT_DIR
    value: ''
    required: false
  objects:
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: "${NOTEBOOK_NAME}"
      labels:
        build: "${NOTEBOOK_NAME}"
    spec:
      lookupPolicy:
        local: true
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: "${NOTEBOOK_NAME}"
      labels:
        build: "${NOTEBOOK_NAME}"
    spec:
      triggers:
      - type: ConfigChange
      - type: ImageChange
      source:
        type: Git
        git:
          uri: "${GIT_REPOSITORY_URL}"
          ref: "${GIT_REFERENCE}"
        contextDir: "${CONTEXT_DIR}"
      strategy:
        type: Source
        sourceStrategy:
          from:
            kind: ImageStreamTag
            name: "${BUILDER_IMAGE}"
      output:
        to:
          kind: ImageStreamTag
          name: "${NOTEBOOK_NAME}:latest"
- kind: Template
  apiVersion: v1
  metadata:
    name: notebook-deployer
    annotations:
      openshift.io/display-name: Jupyter Notebook
      description: Template for deploying Jupyter Notebook images.
      iconClass: icon-python
      tags: python,jupyter
  parameters:
  - name: APPLICATION_NAME
    value: custom-notebook
    required: true
  - name: NOTEBOOK_IMAGE
    value: s2i-minimal-notebook:3.5
    required: true
  - name: NOTEBOOK_PASSWORD
    value: ''
    required: true
  - name: NOTEBOOK_MEMORY
    value: 512Mi
    required: true
  objects:
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      strategy:
        type: Recreate
      triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
          - notebook
          from:
            kind: ImageStreamTag
            name: "${NOTEBOOK_IMAGE}"
      replicas: 1
      selector:
        app: "${APPLICATION_NAME}"
        deploymentconfig: "${APPLICATION_NAME}"
      template:
        metadata:
          labels:
            app: "${APPLICATION_NAME}"
            deploymentconfig: "${APPLICATION_NAME}"
        spec:
          containers:
          - name: notebook
            image: "${APPLICATION_NAME}:latest"
            ports:
            - containerPort: 8080
              protocol: TCP
            resources:
              limits:
                memory: "${NOTEBOOK_MEMORY}"
            env:
            - name: JUPYTER_NOTEBOOK_PASSWORD
              value: "${NOTEBOOK_PASSWORD}"
  - kind: Service
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      ports:
      - name: 8080-tcp
        protocol: TCP
        port: 8080
        targetPort: 8080
      selector:
        app: "${APPLICATION_NAME}"
        deploymentconfig: "${APPLICATION_NAME}"
  - kind: Route
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      host: ''
      to:
        kind: Service
        name: "${APPLICATION_NAME}"
        weight: 100
      port:
        targetPort: 8080-tcp
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
- kind: Template
  apiVersion: v1
  metadata:
    name: notebook-quickstart
    annotations:
      openshift.io/display-name: Jupyter Notebook Quickstart
      description: Template for creating and deploying customised Jupyter Notebook
        images.
      iconClass: icon-python
      tags: python,jupyter
  parameters:
  - name: APPLICATION_NAME
    value: custom-notebook
    required: true
  - name: NOTEBOOK_PASSWORD
    value: ''
    required: true
  - name: NOTEBOOK_MEMORY
    value: 512Mi
    required: true
  - name: BUILDER_IMAGE
    value: s2i-minimal-notebook:3.5
    required: true
  - name: GIT_REPOSITORY_URL
    value: ''
    required: true
  - name: GIT_REFERENCE
    value: master
    required: true
  - name: CONTEXT_DIR
    value: ''
    required: false
  objects:
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      lookupPolicy:
        local: true
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      triggers:
      - type: ConfigChange
      - type: ImageChange
      source:
        type: Git
        git:
          uri: "${GIT_REPOSITORY_URL}"
          ref: "${GIT_REFERENCE}"
        contextDir: "${CONTEXT_DIR}"
      strategy:
        type: Source
        sourceStrategy:
          from:
            kind: ImageStreamTag
            name: "${BUILDER_IMAGE}"
      output:
        to:
          kind: ImageStreamTag
          name: "${APPLICATION_NAME}:latest"
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      strategy:
        type: Recreate
      triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
          - notebook
          from:
            kind: ImageStreamTag
            name: "${APPLICATION_NAME}:latest"
      replicas: 1
      selector:
        app: "${APPLICATION_NAME}"
        deploymentconfig: "${APPLICATION_NAME}"
      template:
        metadata:
          labels:
            app: "${APPLICATION_NAME}"
            deploymentconfig: "${APPLICATION_NAME}"
        spec:
          containers:
          - name: notebook
            image: "${APPLICATION_NAME}:latest"
            ports:
            - containerPort: 8080
              protocol: TCP
            resources:
              limits:
                memory: "${NOTEBOOK_MEMORY}"
            env:
            - name: JUPYTER_NOTEBOOK_PASSWORD
              value: "${NOTEBOOK_PASSWORD}"
  - kind: Service
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      ports:
      - name: 8080-tcp
        protocol: TCP
        port: 8080
        targetPort: 8080
      selector:
        app: "${APPLICATION_NAME}"
        deploymentconfig: "${APPLICATION_NAME}"
  - kind: Route
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      host: ''
      to:
        kind: Service
        name: "${APPLICATION_NAME}"
        weight: 100
      port:
        targetPort: 8080-tcp
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
- kind: Template
  apiVersion: v1
  metadata:
    name: notebook-workspace
    annotations:
      openshift.io/display-name: Jupyter Notebook Workspace
      description: Template for deploying Jupyter Notebook images with persistent
        storage and webdav filesystem access.
      iconClass: icon-python
      tags: python,jupyter
  parameters:
  - name: APPLICATION_NAME
    value: custom-notebook
    required: true
  - name: NOTEBOOK_IMAGE
    value: s2i-minimal-notebook:3.5
    required: true
  - name: NOTEBOOK_PASSWORD
    value: ''
    required: true
  - name: NOTEBOOK_MEMORY
    value: 512Mi
    required: true
  - name: VOLUME_SIZE
    value: 1Gi
    required: true
  objects:
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      strategy:
        type: Recreate
      triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
          - setup-volume
          - notebook
          from:
            kind: ImageStreamTag
            name: "${NOTEBOOK_IMAGE}"
      replicas: 1
      selector:
        app: "${APPLICATION_NAME}"
        deploymentconfig: "${APPLICATION_NAME}"
      template:
        metadata:
          labels:
            app: "${APPLICATION_NAME}"
            deploymentconfig: "${APPLICATION_NAME}"
        spec:
          volumes:
          - name: data
            persistentVolumeClaim:
              claimName: "${APPLICATION_NAME}-data"
          initContainers:
          - name: setup-volume
            image: "${NOTEBOOK_IMAGE}"
            command:
            - setup-volume.sh
            - "/opt/app-root"
            - "/mnt/app-root"
            resources:
              limits:
                memory: 256Mi
            volumeMounts:
            - name: data
              mountPath: "/mnt"
          containers:
          - name: notebook
            image: "${NOTEBOOK_IMAGE}"
            ports:
            - containerPort: 8080
              protocol: TCP
            - containerPort: 8081
              protocol: TCP
            resources:
              limits:
                memory: "${NOTEBOOK_MEMORY}"
            volumeMounts:
            - name: data
              mountPath: "/opt/app-root"
              subPath: app-root
            env:
            - name: JUPYTER_NOTEBOOK_PASSWORD
              value: "${NOTEBOOK_PASSWORD}"
            - name: JUPYTER_ENABLE_SUPERVISORD
              value: 'true'
            - name: JUPYTER_ENABLE_WEBDAV
              value: 'true'
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}-data"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: "${VOLUME_SIZE}"
  - kind: Service
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      ports:
      - name: 8080-tcp
        protocol: TCP
        port: 8080
        targetPort: 8080
      - name: 8081-tcp
        protocol: TCP
        port: 8081
        targetPort: 8081
      selector:
        app: "${APPLICATION_NAME}"
        deploymentconfig: "${APPLICATION_NAME}"
  - kind: Route
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      host: ''
      to:
        kind: Service
        name: "${APPLICATION_NAME}"
        weight: 100
      port:
        targetPort: 8080-tcp
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
  - kind: Route
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}-webdav"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      host: ''
      path: "/webdav"
      to:
        kind: Service
        name: "${APPLICATION_NAME}"
        weight: 100
      port:
        targetPort: 8081-tcp
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
